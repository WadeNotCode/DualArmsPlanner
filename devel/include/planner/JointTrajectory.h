// Generated by gencpp from file planner/JointTrajectory.msg
// DO NOT EDIT!


#ifndef PLANNER_MESSAGE_JOINTTRAJECTORY_H
#define PLANNER_MESSAGE_JOINTTRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <planner/PoseJ.h>
#include <planner/PoseJ.h>

namespace planner
{
template <class ContainerAllocator>
struct JointTrajectory_
{
  typedef JointTrajectory_<ContainerAllocator> Type;

  JointTrajectory_()
    : start_index(0)
    , end_index(0)
    , joints_pose_array_1()
    , joints_pose_array_2()  {
    }
  JointTrajectory_(const ContainerAllocator& _alloc)
    : start_index(0)
    , end_index(0)
    , joints_pose_array_1(_alloc)
    , joints_pose_array_2(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _start_index_type;
  _start_index_type start_index;

   typedef int32_t _end_index_type;
  _end_index_type end_index;

   typedef std::vector< ::planner::PoseJ_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::planner::PoseJ_<ContainerAllocator> >> _joints_pose_array_1_type;
  _joints_pose_array_1_type joints_pose_array_1;

   typedef std::vector< ::planner::PoseJ_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::planner::PoseJ_<ContainerAllocator> >> _joints_pose_array_2_type;
  _joints_pose_array_2_type joints_pose_array_2;





  typedef boost::shared_ptr< ::planner::JointTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner::JointTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct JointTrajectory_

typedef ::planner::JointTrajectory_<std::allocator<void> > JointTrajectory;

typedef boost::shared_ptr< ::planner::JointTrajectory > JointTrajectoryPtr;
typedef boost::shared_ptr< ::planner::JointTrajectory const> JointTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner::JointTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner::JointTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner::JointTrajectory_<ContainerAllocator1> & lhs, const ::planner::JointTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.start_index == rhs.start_index &&
    lhs.end_index == rhs.end_index &&
    lhs.joints_pose_array_1 == rhs.joints_pose_array_1 &&
    lhs.joints_pose_array_2 == rhs.joints_pose_array_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner::JointTrajectory_<ContainerAllocator1> & lhs, const ::planner::JointTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner::JointTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner::JointTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner::JointTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner::JointTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::JointTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::JointTrajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner::JointTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eec65d949ee76564f104bedfb9feebe1";
  }

  static const char* value(const ::planner::JointTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeec65d949ee76564ULL;
  static const uint64_t static_value2 = 0xf104bedfb9feebe1ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner::JointTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner/JointTrajectory";
  }

  static const char* value(const ::planner::JointTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner::JointTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 start_index\n"
"int32 end_index\n"
"planner/PoseJ[] joints_pose_array_1\n"
"planner/PoseJ[] joints_pose_array_2\n"
"\n"
"================================================================================\n"
"MSG: planner/PoseJ\n"
"float32[6] joints\n"
;
  }

  static const char* value(const ::planner::JointTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner::JointTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_index);
      stream.next(m.end_index);
      stream.next(m.joints_pose_array_1);
      stream.next(m.joints_pose_array_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner::JointTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner::JointTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "start_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start_index);
    s << indent << "end_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.end_index);
    s << indent << "joints_pose_array_1[]" << std::endl;
    for (size_t i = 0; i < v.joints_pose_array_1.size(); ++i)
    {
      s << indent << "  joints_pose_array_1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planner::PoseJ_<ContainerAllocator> >::stream(s, indent + "    ", v.joints_pose_array_1[i]);
    }
    s << indent << "joints_pose_array_2[]" << std::endl;
    for (size_t i = 0; i < v.joints_pose_array_2.size(); ++i)
    {
      s << indent << "  joints_pose_array_2[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planner::PoseJ_<ContainerAllocator> >::stream(s, indent + "    ", v.joints_pose_array_2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MESSAGE_JOINTTRAJECTORY_H
